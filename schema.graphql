schema {
  query: Query
  mutation: Mutation
}

input ArchiveAccountInput {
  clientMutationId: String
  password: String!
}

type ArchiveAccountPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

type BankAccountNode implements Node {
  id: ID!
  createdAt: DateTime!
  bank: BankNode!
  accountName: String!
  accountNumber: String!
  carrier: CarrierNode!
  paymentorderSet(offset: Int, before: String, after: String, first: Int, last: Int, orderedBy: ID, transactionId: String, bankAccount: ID, verifiedBy: ID, verification: Boolean, isChecked: Boolean, bankAccount_Carrier: ID): PaymentOrderNodeConnection!
}

type BankAccountNodeConnection {
  pageInfo: PageInfo!
  edges: [BankAccountNodeEdge]!
}

type BankAccountNodeEdge {
  node: BankAccountNode
  cursor: String!
}

type BankNode implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  logo: String
  bankaccountSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID): BankAccountNodeConnection!
}

input BoardPassengerMutationInput {
  id: ID!
  clientMutationId: String
}

type BoardPassengerMutationPayload {
  ticket: TicketNode
  clientMutationId: String
}

input BookTicketMutationInput {
  trip: ID!
  passengers: String!
  clientMutationId: String
}

type BookTicketMutationPayload {
  tickets: [TicketNode]
  order: PaymentOrderNode
  clientMutationId: String
}

input BusDriverMutationInput {
  bus: ID
  remove: Boolean
  driver: ID
  assistant: ID
  clientMutationId: String
}

type BusDriverMutationPayload {
  bus: BusNode
  clientMutationId: String
}

input BusMutationInput {
  plateNumber: String
  busNumber: String
  carrier: ID
  busSeatConfiguration: ID
  id: ID
  clientMutationId: String
}

type BusMutationPayload {
  bus: BusNode
  clientMutationId: String
}

type BusNode implements Node {
  id: ID!
  createdAt: DateTime!
  plateNumber: String!
  plateCode: String!
  busNumber: String!
  carrier: CarrierNode!
  busSeatConfiguration: BusSeatConfigurationNode!
  drivers(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, email: String, email_Icontains: String, phone: String, phone_Icontains: String, carrierticketer_Carrier: ID): BusUserNodeConnection!
  assistants(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, email: String, email_Icontains: String, phone: String, phone_Icontains: String, carrierticketer_Carrier: ID): BusUserNodeConnection!
  tripSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, carrier_In: [ID], bulkRef: String, departureTime: DateTime, departureTime_Gte: DateTime, departureTime_Lte: DateTime, route_LeavingFrom: ID, route_Destination: ID, route_Routeprice_Price: Float, route_Routeprice_Price_Lte: Float, route_Routeprice_Price_Gte: Float): TripNodeConnection!
}

type BusNodeConnection {
  pageInfo: PageInfo!
  edges: [BusNodeEdge]!
}

type BusNodeEdge {
  node: BusNode
  cursor: String!
}

input BusSeatConfigurationMutationInput {
  name: String!
  id: ID
  clientMutationId: String
}

type BusSeatConfigurationMutationPayload {
  busSeatConfiguration: BusSeatConfigurationNode
  clientMutationId: String
}

type BusSeatConfigurationNode implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  busseatconfigurationseatSet(offset: Int, before: String, after: String, first: Int, last: Int): BusSeatConfigurationSeatNodeConnection!
  busSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, busSeatConfiguration: ID): BusNodeConnection!
  tripSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, carrier_In: [ID], bulkRef: String, departureTime: DateTime, departureTime_Gte: DateTime, departureTime_Lte: DateTime, route_LeavingFrom: ID, route_Destination: ID, route_Routeprice_Price: Float, route_Routeprice_Price_Lte: Float, route_Routeprice_Price_Gte: Float): TripNodeConnection!
}

type BusSeatConfigurationNodeConnection {
  pageInfo: PageInfo!
  edges: [BusSeatConfigurationNodeEdge]!
}

type BusSeatConfigurationNodeEdge {
  node: BusSeatConfigurationNode
  cursor: String!
}

input BusSeatConfigurationSeatMutationInput {
  name: String!
  busSeatConfiguration: ID!
  row: Int!
  col: Int!
  windowSeat: Boolean
  id: ID
  clientMutationId: String
}

type BusSeatConfigurationSeatMutationPayload {
  busSeatConfigurationSeat: BusSeatConfigurationSeatNode
  clientMutationId: String
}

type BusSeatConfigurationSeatNode implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  busSeatConfiguration: BusSeatConfigurationNode!
  windowSeat: Boolean!
  row: Int!
  col: Int!
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int): TicketNodeConnection!
  isLocked: Boolean
}

type BusSeatConfigurationSeatNodeConnection {
  pageInfo: PageInfo!
  edges: [BusSeatConfigurationSeatNodeEdge]!
}

type BusSeatConfigurationSeatNodeEdge {
  node: BusSeatConfigurationSeatNode
  cursor: String!
}

type BusStopNode implements Node {
  id: ID!
  createdAt: DateTime!
  latitude: Decimal
  longitude: Decimal
  name: String!
  city: CityNode!
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int): TicketNodeConnection!
}

type BusStopNodeConnection {
  pageInfo: PageInfo!
  edges: [BusStopNodeEdge]!
}

type BusStopNodeEdge {
  node: BusStopNode
  cursor: String!
}

type BusUserNode implements Node {
  id: ID!
  lastLogin: DateTime
  email: String
  emailVerificationCode: String
  emailVerificationRequestedAt: DateTime
  emailVerifiedAt: DateTime
  phone: String
  phoneVerificationCode: String
  phoneVerificationRequestedAt: DateTime
  phoneVerifiedAt: DateTime
  firstName: String
  lastName: String
  isStaff: Boolean!
  isActive: Boolean!
  profilePic: String
  createdAt: DateTime!
  userfcmtokenSet(offset: Int, before: String, after: String, first: Int, last: Int): UserFCMTokenNodeConnection!
  carrierSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierNodeConnection!
  CarrierTicketer(offset: Int, before: String, after: String, first: Int, last: Int): CarrierNodeConnection!
  CarrierRating(offset: Int, before: String, after: String, first: Int, last: Int): CarrierNodeConnection!
  carrieradminSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierAdminNodeConnection!
  carrierticketerSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierTicketerNodeConnection!
  carrierratingSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierRatingNodeConnection!
  drivers(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, busSeatConfiguration: ID): BusNodeConnection!
  assistants(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, busSeatConfiguration: ID): BusNodeConnection!
  tripSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, carrier_In: [ID], bulkRef: String, departureTime: DateTime, departureTime_Gte: DateTime, departureTime_Lte: DateTime, route_LeavingFrom: ID, route_Destination: ID, route_Routeprice_Price: Float, route_Routeprice_Price_Lte: Float, route_Routeprice_Price_Gte: Float): TripNodeConnection!
  triplocationSet(offset: Int, before: String, after: String, first: Int, last: Int, trip: ID): TripLocationNodeConnection!
  orderedBy(offset: Int, before: String, after: String, first: Int, last: Int, orderedBy: ID, transactionId: String, bankAccount: ID, verifiedBy: ID, verification: Boolean, isChecked: Boolean, bankAccount_Carrier: ID): PaymentOrderNodeConnection!
  paymentorderSet(offset: Int, before: String, after: String, first: Int, last: Int, orderedBy: ID, transactionId: String, bankAccount: ID, verifiedBy: ID, verification: Boolean, isChecked: Boolean, bankAccount_Carrier: ID): PaymentOrderNodeConnection!
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int): TicketNodeConnection!
  notificationSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, body: String): NotificationNodeConnection!
  usernotificationSet(offset: Int, before: String, after: String, first: Int, last: Int, user: ID): UserNotificationNodeConnection!
  password: String!
  isRegistered: Boolean!
  isSuperuser: Boolean!
  tickets: [TicketNode]
}

type BusUserNodeConnection {
  pageInfo: PageInfo!
  edges: [BusUserNodeEdge]!
}

type BusUserNodeEdge {
  node: BusUserNode
  cursor: String!
}

input CancelTicketMutationInput {
  id: ID!
  clientMutationId: String
}

type CancelTicketMutationPayload {
  ticket: TicketNode
  clientMutationId: String
}

input CancelTripMutationInput {
  trip: ID!
  clientMutationId: String
}

type CancelTripMutationPayload {
  trip: TripNode
  clientMutationId: String
}

type CarrierAdminNode implements Node {
  id: ID!
  createdAt: DateTime!
  carrier: CarrierNode!
  user: BusUserNode!
  readPermission: Boolean!
  writePermission: Boolean!
}

type CarrierAdminNodeConnection {
  pageInfo: PageInfo!
  edges: [CarrierAdminNodeEdge]!
}

type CarrierAdminNodeEdge {
  node: CarrierAdminNode
  cursor: String!
}

input CarrierMutationInput {
  name: String!
  phones: [String]
  id: ID
  clientMutationId: String
}

type CarrierMutationPayload {
  carrier: CarrierNode
  clientMutationId: String
}

type CarrierNode implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  nameAm: String
  nameOr: String
  nameTg: String
  logo: String
  admins(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, email: String, email_Icontains: String, phone: String, phone_Icontains: String, carrierticketer_Carrier: ID): BusUserNodeConnection!
  ticketers(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, email: String, email_Icontains: String, phone: String, phone_Icontains: String, carrierticketer_Carrier: ID): BusUserNodeConnection!
  ratings(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, email: String, email_Icontains: String, phone: String, phone_Icontains: String, carrierticketer_Carrier: ID): BusUserNodeConnection!
  carrierphoneSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierPhoneNodeConnection!
  carrieradminSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierAdminNodeConnection!
  carrierticketerSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierTicketerNodeConnection!
  carrierratingSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierRatingNodeConnection!
  busSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, busSeatConfiguration: ID): BusNodeConnection!
  routeSet(offset: Int, before: String, after: String, first: Int, last: Int, leavingFrom: ID, destination: ID): RouteNodeConnection!
  routepriceSet(offset: Int, before: String, after: String, first: Int, last: Int): RoutePriceNodeConnection!
  tripSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, carrier_In: [ID], bulkRef: String, departureTime: DateTime, departureTime_Gte: DateTime, departureTime_Lte: DateTime, route_LeavingFrom: ID, route_Destination: ID, route_Routeprice_Price: Float, route_Routeprice_Price_Lte: Float, route_Routeprice_Price_Gte: Float): TripNodeConnection!
  bankaccountSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID): BankAccountNodeConnection!
}

type CarrierNodeConnection {
  pageInfo: PageInfo!
  edges: [CarrierNodeEdge]!
}

type CarrierNodeEdge {
  node: CarrierNode
  cursor: String!
}

type CarrierPhoneNode implements Node {
  id: ID!
  createdAt: DateTime!
  carrier: CarrierNode!
  phone: String!
}

type CarrierPhoneNodeConnection {
  pageInfo: PageInfo!
  edges: [CarrierPhoneNodeEdge]!
}

type CarrierPhoneNodeEdge {
  node: CarrierPhoneNode
  cursor: String!
}

input CarrierRatingMutationInput {
  carrier: ID!
  rating: Int!
  clientMutationId: String
}

type CarrierRatingMutationPayload {
  rating: CarrierRatingNode
  clientMutationId: String
}

type CarrierRatingNode implements Node {
  id: ID!
  createdAt: DateTime!
  carrier: CarrierNode!
  user: BusUserNode!
  rating: Int!
}

type CarrierRatingNodeConnection {
  pageInfo: PageInfo!
  edges: [CarrierRatingNodeEdge]!
}

type CarrierRatingNodeEdge {
  node: CarrierRatingNode
  cursor: String!
}

input CarrierTicketerMutationInput {
  carrier: ID!
  user: ID
  userPhone: String
  clientMutationId: String
}

type CarrierTicketerMutationPayload {
  carrierTicketer: CarrierTicketerNode
  clientMutationId: String
}

type CarrierTicketerNode implements Node {
  id: ID!
  createdAt: DateTime!
  carrier: CarrierNode!
  user: BusUserNode!
  readPermission: Boolean!
  writePermission: Boolean!
}

type CarrierTicketerNodeConnection {
  pageInfo: PageInfo!
  edges: [CarrierTicketerNodeEdge]!
}

type CarrierTicketerNodeEdge {
  node: CarrierTicketerNode
  cursor: String!
}

input ChangeTripBusMutationInput {
  trip: ID!
  bus: ID!
  clientMutationId: String
}

type ChangeTripBusMutationPayload {
  trip: TripNode
  clientMutationId: String
}

input ChangeUserProfilePicMutationInput {
  profilePic: Upload
  clientMutationId: String
}

type ChangeUserProfilePicMutationPayload {
  user: BusUserNode
  clientMutationId: String
}

type CityNode implements Node {
  id: ID!
  createdAt: DateTime!
  latitude: Decimal
  longitude: Decimal
  name: String!
  nameAm: String
  nameOr: String
  nameTg: String
  region: RegionNode!
  busstopSet(offset: Int, before: String, after: String, first: Int, last: Int): BusStopNodeConnection!
  leavingFrom(offset: Int, before: String, after: String, first: Int, last: Int, leavingFrom: ID, destination: ID): RouteNodeConnection!
  destination(offset: Int, before: String, after: String, first: Int, last: Int, leavingFrom: ID, destination: ID): RouteNodeConnection!
  routeSet(offset: Int, before: String, after: String, first: Int, last: Int, leavingFrom: ID, destination: ID): RouteNodeConnection!
}

type CityNodeConnection {
  pageInfo: PageInfo!
  edges: [CityNodeEdge]!
}

type CityNodeEdge {
  node: CityNode
  cursor: String!
}

type CountryNode implements Node {
  id: ID!
  createdAt: DateTime!
  latitude: Decimal
  longitude: Decimal
  name: String!
  countryCode: String!
  regionSet(offset: Int, before: String, after: String, first: Int, last: Int): RegionNodeConnection!
}

type CountryNodeConnection {
  pageInfo: PageInfo!
  edges: [CountryNodeEdge]!
}

type CountryNodeEdge {
  node: CountryNode
  cursor: String!
}

input CreateAnonymousUserMutationInput {
  clientMutationId: String
}

type CreateAnonymousUserMutationPayload {
  user: BusUserNode
  token: String
  refreshToken: String
  clientMutationId: String
}

scalar DateTime

scalar Decimal

input DeleteAccountInput {
  clientMutationId: String
  password: String!
}

type DeleteAccountPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input EbaTripMutationInput {
  trip: ID!
  clientMutationId: String
}

type EbaTripMutationPayload {
  trip: TripNode
  clientMutationId: String
}

scalar ExpectedErrorType

scalar GenericScalar

type Mutation {
  trip(input: TripMutationInput!): TripMutationPayload
  changeTripBus(input: ChangeTripBusMutationInput!): ChangeTripBusMutationPayload
  cancelTrip(input: CancelTripMutationInput!): CancelTripMutationPayload
  startTrip(input: StartTripMutationInput!): StartTripMutationPayload
  endTrip(input: EbaTripMutationInput!): EbaTripMutationPayload
  tripLocation(input: TripLocationMutationInput!): TripLocationMutationPayload
  bookTicket(input: BookTicketMutationInput!): BookTicketMutationPayload
  reserveTicket(input: ReserveTicketMutationInput!): ReserveTicketMutationPayload
  cancelTicket(input: CancelTicketMutationInput!): CancelTicketMutationPayload
  rescheduleTicket(input: RescheduleTicketMutationInput!): RescheduleTicketMutationPayload
  boardPassenger(input: BoardPassengerMutationInput!): BoardPassengerMutationPayload
  paymentConfirmationRequest(input: PaymentConfirmationRequestMutationInput!): PaymentConfirmationRequestMutationPayload
  validatePayment(input: ValidatePaymentMutationInput!): ValidatePaymentMutationPayload
  carrier(input: CarrierMutationInput!): CarrierMutationPayload
  carrierRating(input: CarrierRatingMutationInput!): CarrierRatingMutationPayload
  carrierTicketer(input: CarrierTicketerMutationInput!): CarrierTicketerMutationPayload
  busSeatConfiguration(input: BusSeatConfigurationMutationInput!): BusSeatConfigurationMutationPayload
  busSeatConfigurationSeat(input: BusSeatConfigurationSeatMutationInput!): BusSeatConfigurationSeatMutationPayload
  bus(input: BusMutationInput!): BusMutationPayload
  busDriver(input: BusDriverMutationInput!): BusDriverMutationPayload
  register(input: RegisterInput!): RegisterPayload
  verifyAccount(input: VerifyAccountInput!): VerifyAccountPayload
  resendActivationEmail(input: ResendActivationEmailInput!): ResendActivationEmailPayload
  sendPasswordResetEmail(input: SendPasswordResetEmailInput!): SendPasswordResetEmailPayload
  passwordReset(input: PasswordResetInput!): PasswordResetPayload
  passwordChange(input: PasswordChangeInput!): PasswordChangePayload
  archiveAccount(input: ArchiveAccountInput!): ArchiveAccountPayload
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload
  updateAccount(input: UpdateAccountInput!): UpdateAccountPayload
  sendSecondaryEmailActivation(input: SendSecondaryEmailActivationInput!): SendSecondaryEmailActivationPayload
  verifySecondaryEmail(input: VerifySecondaryEmailInput!): VerifySecondaryEmailPayload
  swapEmails(input: SwapEmailsInput!): SwapEmailsPayload
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyTokenInput!): VerifyTokenPayload
  refreshToken(input: RefreshTokenInput!): RefreshTokenPayload
  revokeToken(input: RevokeTokenInput!): RevokeTokenPayload
  createAnonymousUser(input: CreateAnonymousUserMutationInput!): CreateAnonymousUserMutationPayload
  user(input: UserMutationInput!): UserMutationPayload
  sendPhoneVerificationCode(input: SendVerificationCodeMutationInput!): SendVerificationCodeMutationPayload
  verifyPhoneVerificationCode(input: ValidatePhoneMutationInput!): ValidatePhoneMutationPayload
  userFcmToken(input: UserFCMTokenMutationInput!): UserFCMTokenMutationPayload
  changeUserProfilePic(input: ChangeUserProfilePicMutationInput!): ChangeUserProfilePicMutationPayload
}

interface Node {
  id: ID!
}

type NotificationNode implements Node {
  id: ID!
  title: String!
  body: String!
  type: NotificationType!
  users(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, email: String, email_Icontains: String, phone: String, phone_Icontains: String, carrierticketer_Carrier: ID): BusUserNodeConnection!
  createdAt: DateTime!
  usernotificationSet(offset: Int, before: String, after: String, first: Int, last: Int, user: ID): UserNotificationNodeConnection!
}

type NotificationNodeConnection {
  pageInfo: PageInfo!
  edges: [NotificationNodeEdge]!
}

type NotificationNodeEdge {
  node: NotificationNode
  cursor: String!
}

enum NotificationType {
  A_1
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  password: String!
  email: String
  phone: String
}

type ObtainJSONWebTokenPayload {
  token: String
  success: Boolean
  errors: ExpectedErrorType
  user: UserNode
  unarchiving: Boolean
  clientMutationId: String
  refreshToken: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PasswordChangeInput {
  clientMutationId: String
  oldPassword: String!
  newPassword1: String!
  newPassword2: String!
}

type PasswordChangePayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
  refreshToken: String
  token: String
}

input PasswordResetInput {
  clientMutationId: String
  token: String!
  newPassword1: String!
  newPassword2: String!
}

type PasswordResetPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input PaymentConfirmationRequestMutationInput {
  paymentOrderId: String!
  bankAccountId: String!
  transactionId: String!
  clientMutationId: String
}

type PaymentConfirmationRequestMutationPayload {
  paymentOrder: PaymentOrderNode
  clientMutationId: String
}

type PaymentOrderNode implements Node {
  id: ID!
  createdAt: DateTime!
  orderedBy: BusUserNode!
  price: Decimal
  transactionId: String
  bankAccount: BankAccountNode
  verifiedAt: DateTime
  verifiedBy: BusUserNode
  verification: Boolean
  isChecked: Boolean
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int): TicketNodeConnection!
}

type PaymentOrderNodeConnection {
  pageInfo: PageInfo!
  edges: [PaymentOrderNodeEdge]!
}

type PaymentOrderNodeEdge {
  node: PaymentOrderNode
  cursor: String!
}

type Query {
  notifications(offset: Int, before: String, after: String, first: Int, last: Int, title: String, body: String): NotificationNodeConnection
  userNotifications(offset: Int, before: String, after: String, first: Int, last: Int, user: ID): UserNotificationNodeConnection
  notification(id: ID!): NotificationNode
  userNotification(id: ID!): UserNotificationNode
  routes(order: String, offset: Int, before: String, after: String, first: Int, last: Int, leavingFrom: ID, destination: ID): RouteNodeConnection
  route(id: ID!): RouteNode
  trips(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, carrier_In: [ID], bulkRef: String, departureTime: DateTime, departureTime_Gte: DateTime, departureTime_Lte: DateTime, route_LeavingFrom: ID, route_Destination: ID, route_Routeprice_Price: Float, route_Routeprice_Price_Lte: Float, route_Routeprice_Price_Gte: Float): TripNodeConnection
  trip(id: ID!): TripNode
  myCrewTrips(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, carrier_In: [ID], bulkRef: String, departureTime: DateTime, departureTime_Gte: DateTime, departureTime_Lte: DateTime, route_LeavingFrom: ID, route_Destination: ID, route_Routeprice_Price: Float, route_Routeprice_Price_Lte: Float, route_Routeprice_Price_Gte: Float): TripNodeConnection
  tickets(offset: Int, before: String, after: String, first: Int, last: Int): TicketNodeConnection
  myTickets(offset: Int, before: String, after: String, first: Int, last: Int): TicketNodeConnection
  ticket(id: ID!): TicketNode
  bankAccounts(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID): BankAccountNodeConnection
  bankAccount(id: ID!): BankAccountNode
  paymentOrders(offset: Int, before: String, after: String, first: Int, last: Int, orderedBy: ID, transactionId: String, bankAccount: ID, verifiedBy: ID, verification: Boolean, isChecked: Boolean, bankAccount_Carrier: ID): PaymentOrderNodeConnection
  paymentOrder(id: ID!): PaymentOrderNode
  countries(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): CountryNodeConnection
  country(id: ID!): CountryNode
  regions(offset: Int, before: String, after: String, first: Int, last: Int): RegionNodeConnection
  region(id: ID!): RegionNode
  cities(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): CityNodeConnection
  city(id: ID!): CityNode
  busStops(offset: Int, before: String, after: String, first: Int, last: Int): BusStopNodeConnection
  busStop(id: ID!): BusStopNode
  carriers(offset: Int, before: String, after: String, first: Int, last: Int): CarrierNodeConnection
  carrier(id: ID!): CarrierNode
  carrierAdmins(offset: Int, before: String, after: String, first: Int, last: Int): CarrierAdminNodeConnection
  carrierAdmin(id: ID!): CarrierAdminNode
  busSeatConfigurations(offset: Int, before: String, after: String, first: Int, last: Int): BusSeatConfigurationNodeConnection
  busSeatConfiguration(id: ID!): BusSeatConfigurationNode
  busSeatConfigurationSeats(offset: Int, before: String, after: String, first: Int, last: Int): BusSeatConfigurationSeatNodeConnection
  busSeatConfigurationSeat(id: ID!): BusSeatConfigurationSeatNode
  buses(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, busSeatConfiguration: ID): BusNodeConnection
  bus(id: ID!): BusNode
  busUsers(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, firstName: String, firstName_Icontains: String, lastName: String, lastName_Icontains: String, email: String, email_Icontains: String, phone: String, phone_Icontains: String, carrierticketer_Carrier: ID): BusUserNodeConnection
  busUser(id: ID!): BusUserNode
  me: UserNode
  user(id: ID!): UserNode
  users(offset: Int, before: String, after: String, first: Int, last: Int, email: String, phone: String, firstName: String, firstName_Icontains: String, firstName_Istartswith: String, lastName: String, lastName_Icontains: String, lastName_Istartswith: String, isActive: Boolean): UserNodeConnection
}

input RefreshTokenInput {
  refreshToken: String!
  clientMutationId: String
}

type RefreshTokenPayload {
  token: String
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
  refreshToken: String
}

type RegionNode implements Node {
  id: ID!
  createdAt: DateTime!
  latitude: Decimal
  longitude: Decimal
  name: String!
  country: CountryNode!
  citySet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): CityNodeConnection!
}

type RegionNodeConnection {
  pageInfo: PageInfo!
  edges: [RegionNodeEdge]!
}

type RegionNodeEdge {
  node: RegionNode
  cursor: String!
}

input RegisterInput {
  clientMutationId: String
  firstName: String
  lastName: String
  phone: String
  email: String
}

type RegisterPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
  refreshToken: String
  token: String
}

input RescheduleTicketMutationInput {
  id: ID!
  trip: ID!
  busSeatConfigurationSeat: ID!
  clientMutationId: String
}

type RescheduleTicketMutationPayload {
  ticket: TicketNode
  clientMutationId: String
}

input ResendActivationEmailInput {
  clientMutationId: String
  email: String!
}

type ResendActivationEmailPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input ReserveTicketMutationInput {
  id: ID
  busSeatConfigurationSeat: ID!
  trip: String!
  lock: Boolean
  replace: Boolean
  clientMutationId: String
}

type ReserveTicketMutationPayload {
  ticket: TicketNode
  clientMutationId: String
}

input RevokeTokenInput {
  refreshToken: String!
  clientMutationId: String
}

type RevokeTokenPayload {
  revoked: Int
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

type RouteNode implements Node {
  id: ID!
  createdAt: DateTime!
  leavingFrom: CityNode!
  destination: CityNode!
  distance: Int
  prices(offset: Int, before: String, after: String, first: Int, last: Int): CarrierNodeConnection!
  crossingCities(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): CityNodeConnection!
  routepriceSet(offset: Int, before: String, after: String, first: Int, last: Int): RoutePriceNodeConnection!
  tripSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, carrier_In: [ID], bulkRef: String, departureTime: DateTime, departureTime_Gte: DateTime, departureTime_Lte: DateTime, route_LeavingFrom: ID, route_Destination: ID, route_Routeprice_Price: Float, route_Routeprice_Price_Lte: Float, route_Routeprice_Price_Gte: Float): TripNodeConnection!
}

type RouteNodeConnection {
  pageInfo: PageInfo!
  edges: [RouteNodeEdge]!
}

type RouteNodeEdge {
  node: RouteNode
  cursor: String!
}

type RoutePriceNode implements Node {
  id: ID!
  createdAt: DateTime!
  route: RouteNode!
  carrier: CarrierNode!
  price: Decimal!
}

type RoutePriceNodeConnection {
  pageInfo: PageInfo!
  edges: [RoutePriceNodeEdge]!
}

type RoutePriceNodeEdge {
  node: RoutePriceNode
  cursor: String!
}

input SendPasswordResetEmailInput {
  clientMutationId: String
  email: String!
}

type SendPasswordResetEmailPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input SendSecondaryEmailActivationInput {
  clientMutationId: String
  email: String!
  password: String!
}

type SendSecondaryEmailActivationPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input SendVerificationCodeMutationInput {
  phone: String!
  appSignature: String
  clientMutationId: String
}

type SendVerificationCodeMutationPayload {
  user: BusUserNode
  isNew: Boolean
  clientMutationId: String
}

input StartTripMutationInput {
  trip: ID!
  clientMutationId: String
}

type StartTripMutationPayload {
  trip: TripNode
  clientMutationId: String
}

input SwapEmailsInput {
  clientMutationId: String
  password: String!
}

type SwapEmailsPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

type TicketNode implements Node {
  id: ID!
  createdAt: DateTime!
  user: BusUserNode!
  firstName: String
  lastName: String
  phone: String
  trip: TripNode!
  busStop: BusStopNode
  busSeatConfigurationSeat: BusSeatConfigurationSeatNode!
  order: PaymentOrderNode
  ticketNumber: String
  lockedAt: DateTime
  lockedUntil: DateTime
  boardedAt: DateTime
  isLocked: Boolean
  state: TicketState
}

type TicketNodeConnection {
  pageInfo: PageInfo!
  edges: [TicketNodeEdge]!
}

type TicketNodeEdge {
  node: TicketNode
  cursor: String!
}

enum TicketState {
  RESERVED
  BOOKED
  VERIFIED
  DECLINED
}

input TripLocationMutationInput {
  trip: ID!
  time: DateTime!
  lat: Decimal!
  long: Decimal!
  clientMutationId: String
}

type TripLocationMutationPayload {
  tripLocation: TripLocationNode
  clientMutationId: String
}

type TripLocationNode implements Node {
  id: ID!
  createdAt: DateTime!
  time: DateTime!
  lat: Decimal!
  long: Decimal!
  trip: TripNode!
  user: BusUserNode!
}

type TripLocationNodeConnection {
  pageInfo: PageInfo!
  edges: [TripLocationNodeEdge]!
}

type TripLocationNodeEdge {
  node: TripLocationNode
  cursor: String!
}

input TripMutationInput {
  id: ID
  route: ID
  leavingFrom: ID
  destination: ID
  bus: ID
  carrier: ID!
  departureDatetime: String!
  arrivalDatetime: String!
  busSeatConfiguration: ID!
  reputation: Int
  clientMutationId: String
}

type TripMutationPayload {
  trips: [TripNode]
  bulkRef: String
  clientMutationId: String
}

type TripNode implements Node {
  id: ID!
  createdAt: DateTime!
  route: RouteNode!
  carrier: CarrierNode!
  bus: BusNode
  busSeatConfiguration: BusSeatConfigurationNode!
  departureTime: DateTime!
  arrivalTime: DateTime!
  bulkRef: String
  canceledBy: BusUserNode
  startedAt: DateTime
  endedAt: DateTime
  triplocationSet(offset: Int, before: String, after: String, first: Int, last: Int, trip: ID): TripLocationNodeConnection!
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int): TicketNodeConnection!
  price: Decimal
  seats: [TripSeatType]
}

type TripNodeConnection {
  pageInfo: PageInfo!
  edges: [TripNodeEdge]!
}

type TripNodeEdge {
  node: TripNode
  cursor: String!
}

type TripSeatType {
  busSeatConfigurationSeat: BusSeatConfigurationSeatNode
  isLocked: Boolean
  isSold: Boolean
  isLockedByMe: Boolean
  isBookedByMe: Boolean
  lockedBy: BusUserNode
  ticket: TicketNode
}

input UpdateAccountInput {
  clientMutationId: String
  email: String
  phone: String
  firstName: String
  lastName: String
}

type UpdateAccountPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

scalar Upload

input UserFCMTokenMutationInput {
  token: String!
  clientMutationId: String
}

type UserFCMTokenMutationPayload {
  userFcmToken: UserFCMTokenNode
  clientMutationId: String
}

type UserFCMTokenNode implements Node {
  id: ID!
  createdAt: DateTime!
  user: BusUserNode!
  token: String!
}

type UserFCMTokenNodeConnection {
  pageInfo: PageInfo!
  edges: [UserFCMTokenNodeEdge]!
}

type UserFCMTokenNodeEdge {
  node: UserFCMTokenNode
  cursor: String!
}

input UserMutationInput {
  id: ID
  firstName: String
  lastName: String
  phone: String
  password: String!
  clientMutationId: String
}

type UserMutationPayload {
  user: BusUserNode
  token: String
  refreshToken: String
  clientMutationId: String
}

type UserNode implements Node {
  id: ID!
  lastLogin: DateTime
  email: String
  emailVerificationCode: String
  emailVerificationRequestedAt: DateTime
  emailVerifiedAt: DateTime
  phone: String
  phoneVerificationCode: String
  phoneVerificationRequestedAt: DateTime
  phoneVerifiedAt: DateTime
  firstName: String
  lastName: String
  isStaff: Boolean!
  isActive: Boolean!
  profilePic: String
  createdAt: DateTime!
  userfcmtokenSet(offset: Int, before: String, after: String, first: Int, last: Int): UserFCMTokenNodeConnection!
  carrierSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierNodeConnection!
  CarrierTicketer(offset: Int, before: String, after: String, first: Int, last: Int): CarrierNodeConnection!
  CarrierRating(offset: Int, before: String, after: String, first: Int, last: Int): CarrierNodeConnection!
  carrieradminSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierAdminNodeConnection!
  carrierticketerSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierTicketerNodeConnection!
  carrierratingSet(offset: Int, before: String, after: String, first: Int, last: Int): CarrierRatingNodeConnection!
  drivers(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, busSeatConfiguration: ID): BusNodeConnection!
  assistants(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, busSeatConfiguration: ID): BusNodeConnection!
  tripSet(offset: Int, before: String, after: String, first: Int, last: Int, carrier: ID, carrier_In: [ID], bulkRef: String, departureTime: DateTime, departureTime_Gte: DateTime, departureTime_Lte: DateTime, route_LeavingFrom: ID, route_Destination: ID, route_Routeprice_Price: Float, route_Routeprice_Price_Lte: Float, route_Routeprice_Price_Gte: Float): TripNodeConnection!
  triplocationSet(offset: Int, before: String, after: String, first: Int, last: Int, trip: ID): TripLocationNodeConnection!
  orderedBy(offset: Int, before: String, after: String, first: Int, last: Int, orderedBy: ID, transactionId: String, bankAccount: ID, verifiedBy: ID, verification: Boolean, isChecked: Boolean, bankAccount_Carrier: ID): PaymentOrderNodeConnection!
  paymentorderSet(offset: Int, before: String, after: String, first: Int, last: Int, orderedBy: ID, transactionId: String, bankAccount: ID, verifiedBy: ID, verification: Boolean, isChecked: Boolean, bankAccount_Carrier: ID): PaymentOrderNodeConnection!
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int): TicketNodeConnection!
  notificationSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, body: String): NotificationNodeConnection!
  usernotificationSet(offset: Int, before: String, after: String, first: Int, last: Int, user: ID): UserNotificationNodeConnection!
  pk: Int
  archived: Boolean
  verified: Boolean
  secondaryEmail: String
}

type UserNodeConnection {
  pageInfo: PageInfo!
  edges: [UserNodeEdge]!
}

type UserNodeEdge {
  node: UserNode
  cursor: String!
}

type UserNotificationNode implements Node {
  id: ID!
  notification: NotificationNode!
  user: BusUserNode!
  sentViaTelegram: Boolean
  sentViaSms: Boolean
  sentViaFcm: Boolean
  seen: Boolean!
  createdAt: DateTime!
}

type UserNotificationNodeConnection {
  pageInfo: PageInfo!
  edges: [UserNotificationNodeEdge]!
}

type UserNotificationNodeEdge {
  node: UserNotificationNode
  cursor: String!
}

input ValidatePaymentMutationInput {
  paymentOrderId: String!
  verification: Boolean!
  clientMutationId: String
}

type ValidatePaymentMutationPayload {
  paymentOrder: PaymentOrderNode
  clientMutationId: String
}

input ValidatePhoneMutationInput {
  phone: String!
  verificationCode: String!
  password: String
  confirmPassword: String
  clientMutationId: String
}

type ValidatePhoneMutationPayload {
  user: BusUserNode
  token: String
  refreshToken: String
  clientMutationId: String
}

input VerifyAccountInput {
  clientMutationId: String
  token: String!
}

type VerifyAccountPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input VerifySecondaryEmailInput {
  clientMutationId: String
  token: String!
}

type VerifySecondaryEmailPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input VerifyTokenInput {
  token: String!
  clientMutationId: String
}

type VerifyTokenPayload {
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}
